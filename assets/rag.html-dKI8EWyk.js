import{_ as p,c as t,b as s,a as l,d as a,e as o,r as i,o as c}from"./app-LhysmSA2.js";const r="/images/ragFlow.png",u={},d={href:"https://github.com/datawhalechina/wow-rag/tree/main",target:"_blank",rel:"noopener noreferrer"};function m(k,n){const e=i("ExternalLinkIcon");return c(),t("div",null,[s("p",null,[n[1]||(n[1]=a("学习的项目是：")),s("a",d,[n[0]||(n[0]=a("datawhale的rag教程")),o(e)])]),n[2]||(n[2]=l('<h4 id="首先明确rag是什么" tabindex="-1"><a class="header-anchor" href="#首先明确rag是什么"><span>首先明确RAG是什么？</span></a></h4><p>RAG全称是Retrieval Augmented Generation，它通过向模型提供来自知识库的文本片段来增强模型的生成能力。RAG通过在生成过程中检索与输入相关的文本片段，然后将这些片段作为上下文提供给模型，以帮助模型生成更准确和相关的输出。使用大白话来说：有一个知识库，用户输入一个问题，然后通过检索得到相关的信息，然后将相关信息作为生成式模型的输入，产生最后的结果。</p><h4 id="rag的原理是什么" tabindex="-1"><a class="header-anchor" href="#rag的原理是什么"><span>RAG的原理是什么？</span></a></h4><p>RAG的原理是使用知识库来增强模型的生成能力。</p><ol><li>检索（Retrieval）：先从一个大型知识库中检索与用户输入相关的文档或信息。</li><li>生成（Generation）：采用一个生成式语言模型来基于检索到的信息生成最终的回答。</li></ol><p>流程图如下 <img src="'+r+`" alt="流程图"></p><h4 id="rag的步骤" tabindex="-1"><a class="header-anchor" href="#rag的步骤"><span>RAG的步骤</span></a></h4><p>代码实现的步骤：</p><ul><li>构建知识库的向量化</li><li>向量化之后的对象可以作为桥梁，建立用户提出问题和生成式人工智能之间的联系。</li></ul><h5 id="_1-首先对于文档库需要进行向量化处理-将文档库中的文档和提出的问题都转化为向量-方便检索。" tabindex="-1"><a class="header-anchor" href="#_1-首先对于文档库需要进行向量化处理-将文档库中的文档和提出的问题都转化为向量-方便检索。"><span>1. 首先对于文档库需要进行向量化处理，将文档库中的文档和提出的问题都转化为向量，方便检索。</span></a></h5><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line">[文档] → 切分 → [Node1<span class="token punctuation">,</span> Node2<span class="token punctuation">,</span> Node3<span class="token punctuation">,</span> ...] → embedding模型 → 向量化 → [向量1<span class="token punctuation">,</span> 向量2<span class="token punctuation">,</span> 向量3<span class="token punctuation">,</span> ...]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">embedding_model <span class="token operator">=</span> OllamaEmbedding<span class="token punctuation">(</span>base_url<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">## 切分</span></span>
<span class="line">documents <span class="token operator">=</span> SimpleDirectoryReader<span class="token punctuation">(</span>input_files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;.././docs/问答手册.txt&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">## 转换成多个node</span></span>
<span class="line">transformations <span class="token operator">=</span> <span class="token punctuation">[</span>SentenceSplitter<span class="token punctuation">(</span>chunk_size <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">nodes <span class="token operator">=</span> run_transformations<span class="token punctuation">(</span>documents<span class="token punctuation">,</span> transformations<span class="token operator">=</span>transformations<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">## embedding模型将node转换向量的集合</span></span>
<span class="line">index <span class="token operator">=</span> VectorStoreIndex<span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> embed_model<span class="token operator">=</span>embedding_model<span class="token punctuation">,</span> show_progress<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-向量化之后的对象可以作为桥梁-建立用户提出问题和生成式人工智能之间的联系。" tabindex="-1"><a class="header-anchor" href="#_2-向量化之后的对象可以作为桥梁-建立用户提出问题和生成式人工智能之间的联系。"><span>2. 向量化之后的对象可以作为桥梁，建立用户提出问题和生成式人工智能之间的联系。</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">llm <span class="token operator">=</span> Ollama<span class="token punctuation">(</span>base_url<span class="token operator">=</span>base_url<span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">)</span> </span>
<span class="line"><span class="token comment">## 建立用户输入和生成式人工智能之间的联系</span></span>
<span class="line">query_engine <span class="token operator">=</span> index<span class="token punctuation">.</span>as_query_engine<span class="token punctuation">(</span></span>
<span class="line">    streaming <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">    similarity_top_k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">    llm<span class="token operator">=</span>llm</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">## 提出问题</span></span>
<span class="line">response_stream <span class="token operator">=</span> query_engine<span class="token punctuation">.</span>query<span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;请写一篇1000字的文章论述法学专业就业前景&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">## 打印回答</span></span>
<span class="line"><span class="token keyword">for</span> text <span class="token keyword">in</span> response_stream<span class="token punctuation">.</span>response_gen<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的代码如下</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">from</span> llama_index<span class="token punctuation">.</span>llms<span class="token punctuation">.</span>ollama <span class="token keyword">import</span> Ollama</span>
<span class="line"><span class="token keyword">from</span> llama_index<span class="token punctuation">.</span>core <span class="token keyword">import</span> SimpleDirectoryReader<span class="token punctuation">,</span> Document</span>
<span class="line"><span class="token keyword">from</span> llama_index<span class="token punctuation">.</span>core <span class="token keyword">import</span> VectorStoreIndex</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> llama_index<span class="token punctuation">.</span>core<span class="token punctuation">.</span>node_parser <span class="token keyword">import</span> SentenceSplitter</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> llama_index<span class="token punctuation">.</span>embeddings<span class="token punctuation">.</span>ollama <span class="token keyword">import</span> OllamaEmbedding</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> llama_index<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ingestion<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> run_transformations</span>
<span class="line"></span>
<span class="line">llm <span class="token operator">=</span> Ollama<span class="token punctuation">(</span>base_url<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> </span>
<span class="line"></span>
<span class="line">embedding_model <span class="token operator">=</span> OllamaEmbedding<span class="token punctuation">(</span>base_url<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># emb = embedding_model.get_text_embedding(&quot;你好&quot;)</span></span>
<span class="line"><span class="token comment"># len(emb),type(emb)</span></span>
<span class="line"></span>
<span class="line">documents <span class="token operator">=</span> SimpleDirectoryReader<span class="token punctuation">(</span>input_files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;.././docs/问答手册.txt&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">transformations <span class="token operator">=</span> <span class="token punctuation">[</span>SentenceSplitter<span class="token punctuation">(</span>chunk_size <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">nodes <span class="token operator">=</span> run_transformations<span class="token punctuation">(</span>documents<span class="token punctuation">,</span> transformations<span class="token operator">=</span>transformations<span class="token punctuation">)</span></span>
<span class="line">index <span class="token operator">=</span> VectorStoreIndex<span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> embed_model<span class="token operator">=</span>embedding_model<span class="token punctuation">,</span> show_progress<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">query_engine <span class="token operator">=</span> index<span class="token punctuation">.</span>as_query_engine<span class="token punctuation">(</span></span>
<span class="line">    streaming <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">    similarity_top_k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">    llm<span class="token operator">=</span>llm</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">response_stream <span class="token operator">=</span> query_engine<span class="token punctuation">.</span>query<span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;请写一篇1000字的文章论述法学专业就业前景&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> text <span class="token keyword">in</span> response_stream<span class="token punctuation">.</span>response_gen<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16))])}const b=p(u,[["render",m],["__file","rag.html.vue"]]),g=JSON.parse('{"path":"/docs/AI/rag.html","title":"rag","lang":"en-US","frontmatter":{"title":"rag","date":"2025/03/06"},"headers":[],"git":{},"filePathRelative":"docs/AI/rag.md"}');export{b as comp,g as data};
